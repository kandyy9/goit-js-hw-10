{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst dateTimeInput = document.querySelector(\"#datetime-picker\");\nconst button = document.querySelector(\"button[data-start]\");\n\nlet selectedDate;\nlet countdownInterval;\nbutton.disabled = true; \n\nflatpickr(dateTimeInput, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    selectedDate = selectedDates[0];\n    const currentTime = new Date();\n      \n    if (selectedDate - currentTime > 0) {\n      button.disabled = false; \n    } else {\n      button.disabled = true; \n      iziToast.error({\n        message: 'Please choose a date in the future',\n        title: 'Error',\n        position: 'topRight',\n      });\n    }\n  },\n});\n\nbutton.addEventListener(\"click\", startCountdown);\n\nfunction startCountdown() {\n  clearInterval(countdownInterval); \n  dateTimeInput.disabled = true; \n  button.disabled = true; \n  let time = selectedDate - new Date();\n  countdownInterval = setInterval(() => {\n    if (time > 0) {\n      const { days: remainingDays, hours: remainingHours, minutes: remainingMinutes, seconds: remainingSeconds } = convertMs(time);\n      \n      const countdownTime = {\n        days: remainingDays,\n        hours: remainingHours,\n        minutes: remainingMinutes,\n        seconds: remainingSeconds\n      };\n\n      Object.keys(countdownTime).forEach(num => {\n        document.querySelector(`span[data-${num}]`).innerHTML = addLeadingZero(countdownTime[num]);\n      });\n      time -= 1000;\n    } else {\n      clearInterval(countdownInterval);\n      dateTimeInput.disabled = false;\n    }\n  }, 1000);\n}\n\nfunction addLeadingZero(value) {\n  value = value.toString();\n  if (value.length < 2) return (value.padStart(2, \"0\"));\n  return value;\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["dateTimeInput","button","selectedDate","countdownInterval","flatpickr","selectedDates","iziToast","startCountdown","time","remainingDays","remainingHours","remainingMinutes","remainingSeconds","convertMs","countdownTime","num","addLeadingZero","value","ms","days","hours","minutes","seconds"],"mappings":"0IAKA,MAAMA,EAAgB,SAAS,cAAc,kBAAkB,EACzDC,EAAS,SAAS,cAAc,oBAAoB,EAE1D,IAAIC,EACAC,EACJF,EAAO,SAAW,GAElBG,EAAUJ,EAAe,CACvB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQK,EAAe,CACrBH,EAAeG,EAAc,CAAC,EAG1BH,EAFgB,IAAI,KAES,EAC/BD,EAAO,SAAW,IAElBA,EAAO,SAAW,GAClBK,EAAS,MAAM,CACb,QAAS,qCACT,MAAO,QACP,SAAU,UAClB,CAAO,EAEJ,CACH,CAAC,EAEDL,EAAO,iBAAiB,QAASM,CAAc,EAE/C,SAASA,GAAiB,CACxB,cAAcJ,CAAiB,EAC/BH,EAAc,SAAW,GACzBC,EAAO,SAAW,GAClB,IAAIO,EAAON,EAAe,IAAI,KAC9BC,EAAoB,YAAY,IAAM,CACpC,GAAIK,EAAO,EAAG,CACZ,KAAM,CAAE,KAAMC,EAAe,MAAOC,EAAgB,QAASC,EAAkB,QAASC,CAAgB,EAAKC,EAAUL,CAAI,EAErHM,EAAgB,CACpB,KAAML,EACN,MAAOC,EACP,QAASC,EACT,QAASC,CACjB,EAEM,OAAO,KAAKE,CAAa,EAAE,QAAQC,GAAO,CACxC,SAAS,cAAc,aAAaA,CAAG,GAAG,EAAE,UAAYC,EAAeF,EAAcC,CAAG,CAAC,CACjG,CAAO,EACDP,GAAQ,GACd,MACM,cAAcL,CAAiB,EAC/BH,EAAc,SAAW,EAE5B,EAAE,GAAI,CACT,CAEA,SAASgB,EAAeC,EAAO,CAE7B,OADAA,EAAQA,EAAM,WACVA,EAAM,OAAS,EAAWA,EAAM,SAAS,EAAG,GAAG,EAC5CA,CACT,CAEA,SAASJ,EAAUK,EAAI,CAOrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}